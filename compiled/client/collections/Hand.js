// Generated by CoffeeScript 1.7.1
(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  window.Hand = (function(_super) {
    __extends(Hand, _super);

    function Hand() {
      return Hand.__super__.constructor.apply(this, arguments);
    }

    Hand.prototype.model = Card;

    Hand.prototype.bust = false;

    Hand.prototype.initialize = function(array, deck, isDealer) {
      this.deck = deck;
      this.isDealer = isDealer;
    };

    Hand.prototype.hit = function() {
      var dealerScore, playerScore;
      if (!this.bust) {
        this.add(this.deck.pop()).last();
        playerScore = Number($(".player-hand-container").find(".score").text());
        dealerScore = Number($(".dealer-hand-container").find(".score").text());
        if (playerScore > 21) {
          $("h2:first").append("<text style='color:red'> YOU BUSTED </text>");
        }
        if (dealerScore > 21) {
          return $("h2:first").append("<text style='color:red'> DEALER BUSTS. YOU WIN! </text>");
        }
      }
    };

    Hand.prototype.stand = function() {
      var dealerScore, playerScore;
      this.models[0].flip();
      this.dealer();
      playerScore = Number($(".player-hand-container").find(".score").text());
      dealerScore = Number($(".dealer-hand-container").find(".score").text());
      if (!this.bust) {
        if (playerScore === dealerScore) {
          return $("h2:first").append("<text style='color:red'> PUSSHSHHHHSHSHHSHS </text>");
        } else if (playerScore > dealerScore) {
          return $("h2:first").append("<text style='color:red'> PLAYA PLAYA  </text>");
        } else {
          if (dealerScore > playerScore) {
            return $("h2:first").append("<text style='color:red'> DEALER WINS BITCH </text>");
          }
        }
      }
    };

    Hand.prototype.scores = function() {
      var hasAce, score;
      hasAce = this.reduce(function(memo, card) {
        return memo || card.get('value') === 1;
      }, false);
      score = this.reduce(function(score, card) {
        return score + (card.get('revealed') ? card.get('value') : 0);
      }, 0);
      if (score > 21) {
        this.bust = true;
      }
      if (hasAce && score + 10 <= 21) {
        return score + 10;
      } else {
        return score;
      }
    };

    Hand.prototype.dealer = function() {
      var _results;
      _results = [];
      while (this.scores() < 17) {
        _results.push(this.hit());
      }
      return _results;
    };

    return Hand;

  })(Backbone.Collection);

}).call(this);

//# sourceMappingURL=Hand.map
